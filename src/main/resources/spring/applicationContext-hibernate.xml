<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 1.注入数据库配置文件db.properties -->
	<context:property-placeholder
		location="classpath:db.properties" />

	<!-- 2.配置c3p0连接池 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="driverClass" value="${db.driverClass}"></property>
		<property name="jdbcUrl" value="${db.jdbcUrl}"></property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize"
			value="${db.initialPoolSize}"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="${db.maxPoolSize}"></property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="${db.minPoolSize}" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="${db.maxIdleTime}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement"
			value="${db.acquireIncrement}" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。 
			所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
			0 -->
		<property name="maxStatements" value="${db.maxStatements}" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod"
			value="${db.idleConnectionTestPeriod}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts"
			value="${db.acquireRetryAttempts}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。 
			如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure"
			value="${db.breakAfterAcquireFailure}" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod 
			或automaticTestTable 等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout"
			value="${db.breakAfterAcquireFailure}" />
	</bean>

	<!-- 3.注册LocalSessionFactoryBean，spring与hibernate集成，舍弃hibernate.cfg.xml核心配置文件 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<!-- hibernate相关属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!--spring与Hibernate集成无法显示sql语句问题，请见集成后hibernate无法显示sql语句.txt -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.connection.autocommit">false</prop>
			</props>
		</property>
		<!-- 实体映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 请在这里添加实体映射文件配置 -->
				<!-- <value>com/zking/ssh/book/entity/Book.hbm.xml</value> -->
			</list>
		</property>
	</bean>
	
	<!-- 4.spring声明式事物 -->
	<!--1) 开启自动代理 -->
	<!-- 代理对象=目标+通知 ，-->
	<aop:aspectj-autoproxy />

	<!--2) 事务管理器 -->
	<!-- 
	Session session=SessionFactoryUtils.openSession();
	Transaction trans=session.beginTransaction();
	
	// CRUD
	session.save()
	
	trans.commit();
	SessionFactoryUtils.closeSession();
	 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--3) 定义事务特性 （环绕通知）-->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />

			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />

			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="select*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />

			<tx:method name="do*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!--4) 定义切入点 -->
	<!-- 
	适配器=通知+切入点
	通知：环绕事物管理通知
	切入点：
	 -->
	<aop:config>
		<!-- pointcut属性用来定义一个切入点，分成四个部分理解 [* ][*..][*Biz][.*(..)] -->
		<!-- A： 返回类型，*表示返回类型不限 -->
		<!-- B： 包名，*..表示包名不限 -->
		<!-- C： 类或接口名，*Biz表示类或接口必须以Biz结尾 -->
		<!-- D： 方法名和参数，*(..)表示方法名不限，参数类型和个数不限 -->
		
		<!-- 返回类型不限、包名不限、必须Biz结尾的类或接口、方法名和参数类型及个数不限
		例如：
		IBookBiz
		*Biz
		BookBizImpl
		com.zking.ssh.biz.BookBiz *(..)
		com.zking.ssh.biz.OrderBiz *(..)
		
		Biz和Dao区别
		User  ->  UserDao  -> addUser
		User_Role  -> UserRoleDao  -> addUserRole
		
		Biz -> UserBiz -> UserDao和UserRoleDao
		.....

        -->
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* *..*Biz.*(..))" />
	</aop:config>
	
	<!-- 5.注入HibernateTemplate模板 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 6.分包分模块开发 -->
	<!-- BaseDao -->
	<bean id="baseDao" class="com.zking.ssh.base.dao.BaseDao"
		 abstract="true">
		<property name="hibernateTemplate" ref="hibernateTemplate"/>
	</bean>
	
	<!-- BaseBiz -->
	<bean id="baseBiz" class="com.zking.ssh.base.biz.BaseBiz" 
		abstract="true">
	</bean>
	
	<!-- BaseAction -->
	<bean id="baseAction" class="com.zking.ssh.base.action.BaseAction"
		abstract="true">
	</bean>
</beans>







